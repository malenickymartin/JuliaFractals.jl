var documenterSearchIndex = {"docs":
[{"location":"app/#Interactive-App","page":"Interactive App","title":"Interactive App","text":"","category":"section"},{"location":"app/#Introduction","page":"Interactive App","title":"Introduction","text":"","category":"section"},{"location":"app/","page":"Interactive App","title":"Interactive App","text":"The fractal_app function creates an interactive fractal visualization app. This app allows users to explore different fractal equations and visualize them in real-time.","category":"page"},{"location":"app/","page":"Interactive App","title":"Interactive App","text":"fractal_app","category":"page"},{"location":"app/#SPJFractals.fractal_app-app","page":"Interactive App","title":"SPJFractals.fractal_app","text":"fractal_app(img_size::AbstractArray{<:Int} = [1080, 720], fps::Int = 60)\n\nCreate an interactive fractal visualization app.\n\nArguments\n\nimg_size::AbstractArray{<:Int}: The size of the image.\nfps::Int: The frames per second.\n\nReturns\n\nNothing.\n\n\n\n\n\n","category":"function"},{"location":"app/#Example","page":"Interactive App","title":"Example","text":"","category":"section"},{"location":"app/","page":"Interactive App","title":"Interactive App","text":"Here is an example of how to use the fractal_app function:","category":"page"},{"location":"app/","page":"Interactive App","title":"Interactive App","text":"using SPJFractals\n\n# Create an interactive fractal visualization app with default parameters\nfractal_app([1080, 720], 60)","category":"page"},{"location":"app/#Controls","page":"Interactive App","title":"Controls","text":"","category":"section"},{"location":"app/","page":"Interactive App","title":"Interactive App","text":"The interactive app provides the following controls:","category":"page"},{"location":"app/","page":"Interactive App","title":"Interactive App","text":"Function Menu: Select the fractal equation to visualize (e.g., Mandelbrot, Burning Ship, Tricorn).\nColormap Menu: Choose the colormap for visualizing the fractal.\nRun Button: Start or stop the real-time fractal animation.\nReset Button: Reset the fractal visualization to its initial state.\nSliders: Adjust parameters such as zoom and iteration count.","category":"page"},{"location":"reference/#reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/#Contents","page":"Reference","title":"Contents","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/#Index","page":"Reference","title":"Index","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [SPJFractals]","category":"page"},{"location":"reference/#SPJFractals.axes_bounds-Tuple{Any, Any}","page":"Reference","title":"SPJFractals.axes_bounds","text":"axes_bounds(center, plane_size)\n\nCompute the bounds of the axes for a heatmap.\n\nArguments\n\ncenter::AbstractVector{<:Real}: The center of the complex plane in image.\nplane_size::AbstractVector{<:Real}: The size of the complex plane.\n\nReturns\n\nA tuple of two tuples containing the x and y bounds of the axes.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SPJFractals.basic_plot-NTuple{5, Any}","page":"Reference","title":"SPJFractals.basic_plot","text":"compute_fractal(func, params, center, plane_size, img_size, gpu)\n\nCompute a fractal using the given function and parameters.\n\nArguments\n\nfunc::Function: The function to compute the fractal with.\nparams::AbstractArray{<:Number}: The parameters to pass to the function.\ncenter::AbstractVector{<:Real}: The center of the complex plane in image.\nplane_size::AbstractVector{<:Real}: The size of the complex plane.\nimg_size::AbstractVector{<:Integer}: The size of the image.\ngpu::Bool: Whether to use the GPU for computation.\n\nReturns\n\nAn figure and image containing the computed fractal.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SPJFractals.burningship_equation-Tuple{AbstractFloat, AbstractFloat, AbstractVector{<:Real}}","page":"Reference","title":"SPJFractals.burningship_equation","text":"burning_ship_equation(x::AbstractFloat, y::AbstractFloat, params::AbstractVector{<:Real})\n\nCompute the number of iterations for the Burning Ship fractal equation.\n\nArguments\n\nx::AbstractFloat: The x-coordinate of the point.\ny::AbstractFloat: The y-coordinate of the point.\nparams::AbstractVector{<:Real}: Number of iterations.\n\nReturns\n\nThe number of iterations before the point escapes.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SPJFractals.compute_fractal","page":"Reference","title":"SPJFractals.compute_fractal","text":"compute_fractal(func, params, center, plane_size, img_size, use_gpu=true)\n\nCompute a fractal using the given function and parameters.\n\nArguments\n\nfunc::Function: The function to compute the fractal with.\nparams::AbstractArray{<:Number}: The parameters to pass to the function.\ncenter::AbstractVector{<:Real}: The center of the complex plane in image.\nplane_size::AbstractVector{<:Real}: The size of the complex plane.\nimg_size::AbstractVector{<:Integer}: The size of the image.\nuse_gpu::Bool=true: Whether to use the GPU or threaded CPU for computation.\n\nReturns\n\nAn Array{UInt16,2} containing the computed fractal.\n\n\n\n\n\n","category":"function"},{"location":"reference/#SPJFractals.compute_fractal_cpu-Tuple{Function, AbstractArray{<:Number}, AbstractVector{<:Real}, AbstractVector{<:Real}, AbstractVector{<:Integer}}","page":"Reference","title":"SPJFractals.compute_fractal_cpu","text":"compute_fractal_cpu(func, params, center, plane_size, img_size)\n\nCompute a fractal using the given function and parameters on the CPU.\n\nArguments\n\nfunc::Function: The function to compute the fractal with.\nparams::AbstractArray{<:Number}: The parameters to pass to the function.\ncenter::AbstractVector{<:Real}: The center of the complex plane in image.\nplane_size::AbstractVector{<:Real}: The size of the complex plane.\nimg_size::AbstractVector{<:Integer}: The size of the image.\n\nReturns\n\nAn Array{UInt16,2} containing the computed fractal.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SPJFractals.compute_fractal_gpu-Tuple{Function, AbstractArray{<:Number}, AbstractVector{<:Real}, AbstractVector{<:Real}, AbstractVector{<:Integer}}","page":"Reference","title":"SPJFractals.compute_fractal_gpu","text":"compute_fractal_gpu(func, params, center, plane_size, img_size)\n\nCompute a fractal using the given function and parameters on the GPU.\n\nArguments\n\nfunc::Function: The function to compute the fractal with.\nparams::AbstractArray{<:Number}: The parameters to pass to the function.\ncenter::AbstractVector{<:Real}: The center of the complex plane in image.\nplane_size::AbstractVector{<:Real}: The size of the complex plane.\nimg_size::AbstractVector{<:Integer}: The size of the image.\n\nReturns\n\nAn Array{UInt16,2} containing the computed fractal.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SPJFractals.create_newton_equation-Tuple{Function}","page":"Reference","title":"SPJFractals.create_newton_equation","text":"create_newton_equation(func::Function)\n\nCreate a Newton fractal equation from a differentiable function f(x), solving f(x) = 0. Each root is assigned a unique color based on the angle of the complex number.\n\nArguments\n\nfunc::Function: The function to create the Newton fractal equation from.\n\nReturns\n\nA function with input parameters x, y, and params, that computes the Newton fractal.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SPJFractals.fractal_app","page":"Reference","title":"SPJFractals.fractal_app","text":"fractal_app(img_size::AbstractArray{<:Int} = [1080, 720], fps::Int = 60)\n\nCreate an interactive fractal visualization app.\n\nArguments\n\nimg_size::AbstractArray{<:Int}: The size of the image.\nfps::Int: The frames per second.\n\nReturns\n\nNothing.\n\n\n\n\n\n","category":"function"},{"location":"reference/#SPJFractals.fractal_closure","page":"Reference","title":"SPJFractals.fractal_closure","text":"# fractal_closure(func::Function)\n\nCreate a closure for computing fractals with the given function and parameters.\n\nArguments\n\nfunc::Function: The function to compute the fractal with.\nimg_size::AbstractVector{<:Integer}: The size of the image.\nuse_gpu::Bool=true: Whether to use the GPU or threaded CPU for computation.\n\nReturns\n\nA closure that computes a fractal using the given function with parameters: parameters, center, and plane size.\n\n\n\n\n\n","category":"function"},{"location":"reference/#SPJFractals.gpu_fractal_kernel!-Tuple{AbstractArray{<:Integer}, Function, AbstractArray{<:Number}, AbstractArray{<:Real}, AbstractArray{<:Real}}","page":"Reference","title":"SPJFractals.gpu_fractal_kernel!","text":"gpu_fractal_kernel!(result, func, params, x_vals, y_vals)\n\nA kernel for computing a fractal on the GPU.\n\nArguments\n\nresult::AbstractArray{<:Integer}: The array to store the computed fractal.\nfunc::Function: The function to compute the fractal with.\nparams::AbstractArray{<:Number}: The parameters to pass to the function.\nx_vals::AbstractArray{<:Real}: The x values of the complex plane.\ny_vals::AbstractArray{<:Real}: The y values of the complex plane.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SPJFractals.julia_equation","page":"Reference","title":"SPJFractals.julia_equation","text":"julia_equation(x0::Real, y0::Real, params::AbstractVector{<:Real} = [500, 0.0, 0.0])\n\nCompute the number of iterations for the Julia set equation.\n\nArguments\n\nx0::Real: The x-coordinate of the point.\ny0::Real: The y-coordinate of the point.\nparams::AbstractVector{<:Real}: Number of iterations, complex part of the constant, and real part of the constant.\n\nReturns\n\nThe number of iterations before the point escapes.\n\n\n\n\n\n","category":"function"},{"location":"reference/#SPJFractals.mandelbrot_equation-Tuple{AbstractFloat, AbstractFloat, AbstractVector{<:Real}}","page":"Reference","title":"SPJFractals.mandelbrot_equation","text":"mandelbrot_equation(x::AbstractFloat, y::AbstractFloat, params::AbstractVector{<:Real})\n\nCompute the number of iterations for the Mandelbrot set equation.\n\nArguments\n\nx::AbstractFloat: The x-coordinate of the point.\ny::AbstractFloat: The y-coordinate of the point.\nparams::AbstractVector{<:Real}: Number of iterations.\n\nReturns\n\nThe number of iterations before the point escapes.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SPJFractals.plane_ranges-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}, AbstractVector{<:Integer}}","page":"Reference","title":"SPJFractals.plane_ranges","text":"plane_ranges(center, size, img_size)\n\nCompute the ranges of the complex plane in image coordinates.\n\nArguments\n\ncenter::AbstractVector{<:Real}: The center of the complex plane in image.\nsize::AbstractVector{<:Real}: The size of the complex plane.\nimg_size::AbstractVector{<:Integer}: The size of the image.\n\nReturns\n\nA tuple of two arrays containing the x and y ranges of the complex plane.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SPJFractals.tricorn_equation-Tuple{AbstractFloat, AbstractFloat, AbstractVector{<:Real}}","page":"Reference","title":"SPJFractals.tricorn_equation","text":"tricorn_equation(x::AbstractFloat, y::AbstractFloat, params::AbstractVector{<:Real})\n\nCompute the number of iterations for the Tricorn fractal equation.\n\nArguments\n\nx::AbstractFloat: The x-coordinate of the point.\ny::AbstractFloat: The y-coordinate of the point.\nparams::AbstractVector{<:Real}: Number of iterations.\n\nReturns\n\nThe number of iterations before the point escapes.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = SPJFractals","category":"page"},{"location":"#SPJFractals","page":"Home","title":"SPJFractals","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation of SPJFractals.jl. This package provides a simple interface to compute and visualize fractals using the Julia programming language,  leveraging its power for high-performance computations.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install the package, run the following command in the Julia REPL:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(url=\"https://github.com/malenickymartin/SPJFractals.git\")","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Easy-to-use API: Simple and intuitive functions to generate fractals.\nReal-time Animation: Capable of generating real-time animations of fractals.\nHigh Performance: Utilizes Julia's high-performance capabilities to compute fractals efficiently.\nCustomizable: Supports a variety of fractal equations and parameters for customization.","category":"page"},{"location":"#Getting-Started","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To get started with SPJFractals, you can install the package and start generating fractals with just a few lines of code. Below is an example of how to compute a fractal using the burningship_equation with both GPU and CPU:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using SPJFractals\n\ncompute_fractal(burningship_equation, [255], [0, 0], [3, 3], [10, 10])\n\ncompute_fractal(burningship_equation, [255], [0, 0], [3, 3], [10, 10], false)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The input function to the compute_fractal or basic_plot functions can be any function that takes x and y coordinates and a vector of arbitrary parameters, and outputs a UInt16. The output image created by calling the function on each pixel can be mapped on different color maps.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This example demonstrates how to generate a fractal image using the provided functions. You can customize the parameters to explore different fractal patterns and behaviors. You can for example define your own fractal equation and use it:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using SPJFractals\n\nfunction my_equation(x, y, params)\n    z = x + y*im\n    c = params[1] + params[2]*im\n    pixel_value = round(abs(5*z^2+x))\n    return UInt16(pixel_value)\nend\n\ncompute_fractal(my_equation, [1, 1], [0, 0], [1, 1], [10, 10])","category":"page"},{"location":"","page":"Home","title":"Home","text":"Plotting the fractal is done as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using SPJFractals\n\nbasic_plot(burningship_equation, [255], [0, 0], [3, 3], [10, 10])","category":"page"},{"location":"#Benchmarks","page":"Home","title":"Benchmarks","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The following table shows the performance of the package for different fractal equations and resolutions on both GPU and CPU. The times are measured in milliseconds. The CPU times are measured for both single-core and multi-core (6 cores) performance. The benchmarks were run on an NVIDIA GeForce GTX 1650 GPU and an Intel Core i5-9300H CPU. The times for GPU include the time to transfer data to and from the GPU.","category":"page"},{"location":"#Mandelbrot:","page":"Home","title":"Mandelbrot:","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Resolution Time (GPU) Time (CPU 1 core) Time (CPU 6 cores)\n500x500 2.532 55.529 11.380\n1000x1000 9.121 221.672 44.275\n1500x1500 19.852 501.976 98.538","category":"page"},{"location":"#Burning-Ship:","page":"Home","title":"Burning Ship:","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Resolution Time (GPU) Time (CPU 1 core) Time (CPU 6 cores)\n500x500 2.629 59.215 11.879\n1000x1000 9.350 237.025 46.240\n1500x1500 20.268 535.690 102.591","category":"page"},{"location":"#Newton-(xsup3/sup-1):","page":"Home","title":"Newton (x<sup>3</sup>-1):","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Resolution Time (GPU) Time (CPU 1 core) Time (CPU 6 cores)\n500x500 53.690 1301 244.407\n1000x1000 195.101 5235 973.767\n1500x1500 425.482 11772 2188","category":"page"}]
}
